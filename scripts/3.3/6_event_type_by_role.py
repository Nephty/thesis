"""
    We start by constructing an initial query
    to read event data, extracting the author’s username and the event type. This data is then joined with
    the filtered member information to determine the author’s access level within the project where each event
    occurred. This is necessary because the access levels of a contributor can differ across projects. Next, we
    create a bar plot, with each bar representing an access level. Each bar is divided into segments showing the
    average proportion of each event type for contributors with that access level. We also include a separate
    bar for contributors with no assigned role. Figure 3.18 shows the final query, and Figure 3.19 presents the
    resulting visualisation. Below each role is indicated the total number of events generated by contributors
    having this role.

This script demonstrates the construction of this plot.
"""


import matplotlib.pyplot as plt
import duckdb
from collections import defaultdict


events = "read_json_auto('../../data/events/*.json', filename = true, union_by_name = true)"
members = "read_json_auto('../../data/members/*.json', filename = true, union_by_name = true)"
bots = ['marge-bot', 'translations', 'gnome-build-meta-bot', 'support-bot', 'project_16754_bot_2b6da7b077af381b7f45e5a10781e7db', 'project_25833_bot_a55d157583ed16b001006899b37d7846']

QUERY = f"""
SELECT
  events.author.username,
  members.access_level,
  events.action_name
FROM {events} events
LEFT JOIN {members} members
  ON events.author.username = members.username
  AND regexp_replace(events.filename, '^\\.\\./\\.\\./data/events/filtered-events-', '') =
      regexp_replace(members.filename, '^\\.\\./\\.\\./data/members/filtered-members-', '')
WHERE events.author.username NOT IN {bots}
"""

result = duckdb.sql(QUERY).fetchall()

access_level_counts = defaultdict(lambda: defaultdict(int))

contributors_count = {}

for _, access_level, event_type in result:
    access_level_counts[access_level][event_type] += 1
    if access_level not in contributors_count.keys():
        contributors_count[access_level] = 1
    else:
        contributors_count[access_level] += 1

contributors_count[0] = contributors_count[None]

global_event_totals = defaultdict(int)
global_total = 0
for event_counts in access_level_counts.values():
    for event_type, count in event_counts.items():
        global_event_totals[event_type] += count
        global_total += count

threshold = 0.01

reduced_counts = defaultdict(lambda: defaultdict(int))
for access_level, event_counts in access_level_counts.items():
    total_events_for_this_access_level = sum(event_counts.values())
    for event_type, count in event_counts.items():
        key = "Other" if count / total_events_for_this_access_level < threshold else event_type

        reduced_counts[access_level][key] += count

access_level_shares = {}
for access_level, event_type_counts in reduced_counts.items():
    if access_level is None:
        access_level = 0
    total_count = sum(event_type_counts.values())
    access_level_shares[access_level] = {
        event_type: count / total_count for event_type, count in event_type_counts.items()
    }

labels = sorted(list(access_level_shares.keys()))
event_type_totals = defaultdict(float)
for shares in access_level_shares.values():
    for event_type, share in shares.items():
        event_type_totals[event_type] += share

event_types = [et for et, _ in sorted(event_type_totals.items(), key=lambda x: -x[1])]

x = range(len(labels))
bottom = [0] * len(labels)

number_to_role = {
    0: 'No role',
    20: 'Reporter',
    30: 'Developer',
    40: 'Maintainer',
    50: 'Owner'
}

plt.figure(figsize=(9, 6))

for event_type in event_types:
    shares = [access_level_shares[al].get(event_type, 0) for al in labels]
    plt.bar(x, shares, bottom=bottom, label=event_type)
    for i, (x_val, share, btm) in enumerate(zip(x, shares, bottom)):
        if share > 0.01:
            plt.text(
                x_val,
                btm + share / 2,
                f"{share * 100:.1f}%",
                ha='center',
                va='center',
                fontsize=8,
                color='white'
            )
    bottom = [b + s for b, s in zip(bottom, shares)]

plt.xticks(x, [f"{i}\n{'$\\mathit{{' + number_to_role[i].replace(' ', '\\ ') + '}}$' if i == 0 else number_to_role[i]}\n({contributors_count[i]})" for i in labels])
plt.xlabel('Access level')
plt.ylabel('Share')
plt.legend(title='Event type', bbox_to_anchor=(1.05, 1), loc='upper left', borderaxespad=0.)
plt.tight_layout()
plt.savefig(f"out/6_1_event_type_shares_by_access_level.png")